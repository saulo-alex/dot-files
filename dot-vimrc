" Isso √© importante para alguns plugins
set nocompatible
" ------- Plugins (via vim-plug) --------
call plug#begin('~/.vim/plugged')
    Plug 'ap/vim-css-color'
    Plug 'sheerun/vim-polyglot'
    " vim-css est√° dando conflito com vim-css-color, fazendo este s√≥ colorir
    " cores dentro de coment√°rio
    "Plug 'amadeus/vim-css'
    Plug 'preservim/nerdcommenter'
    Plug 'mattn/emmet-vim'
    Plug 'preservim/tagbar'
    Plug 'alvan/vim-closetag'
    Plug 'boeckmann/vim-freepascal'

    " Temas
    Plug 'yasukotelin/shirotelin'
    Plug 'haystackandroid/vimspectr'
    Plug 'nanotech/jellybeans.vim'
    Plug 'jaredgorski/spacecamp'
    Plug 'cormacrelf/vim-colors-github'
    Plug 'chasinglogic/modus-themes-vim'
    Plug 'bdesham/biogoo'
    Plug 'morhetz/gruvbox'
    Plug 'ayu-theme/ayu-vim'
    Plug 'trapd00r/neverland-vim-theme'
    Plug 'marcopaganini/mojave-vim-theme'
    Plug 'luckydev/150colors'
call plug#end()


" -----------------
"  Previne o vim de sair usando C-q indevidamente ao fechar janelas
"  Nota: a fun√ß√£o deve n√£o pode ser local uma vez que ser√° usada com :map
function! Prevent_quit()
    if winnr('$') > 1 || tabpagenr('$') > 1 || confirm('Voc√™ deseja realmente sair?', '&Sim'."\n".'&N√£o') == 1
        quit
    endif
endfunction

function! FindAllColorschemes()
    let g:colorschemes = []
    let l:directories = split(&runtimepath, ',')

    for l:directory in l:directories
        let l:targets = split(glob(l:directory .. '/colors/*.vim'), "\n")
        if len(l:targets) > 0
            for l:target in l:targets
                let l:matches = matchlist(l:target, '/\([^/]\+\)\.vim$')
                let g:colorschemes = add(g:colorschemes, l:matches[1])
            endfor
        endif
    endfor

    let g:colorschemes = sort(g:colorschemes)
endfunction

function! PreviousColorScheme()
    " Poderia utilizar a vari√°vel g:colors_name ou mesmo
    " execute('colorscheme') por√©m alguns temas armazenam nessas vari√°veis
    " nomes diferentes do nome do arquivo deles, e como :colorscheme depende
    " do nome do arquivo, o script falharia nessas circust√¢ncias, ent√£o
    " prefiri utilizar uma vari√°vel a parte para n√£o depender disso.
    let l:index = index(g:colorschemes, g:colorscheme.name, g:colorscheme.index)
    let l:newIndex = l:index - 1
    
    if l:newIndex < 0
        let l:newIndex = len(g:colorschemes) - 1
    endif
    let g:colorscheme.name = g:colorschemes[l:newIndex]

    execute('colorscheme ' .. g:colorscheme.name)
    let g:colorscheme.index = l:newIndex
    " redraw √© necess√°rio para evitar que a mensagem seja limpa antes
    "  de ser visualizada pelo usu√°rio ap√≥s o refresh autom√°tico da tela
    redraw | echom "Tema definido para" g:colorscheme.name g:colorscheme.index
endfunction

function! NextColorScheme()
    " Poderia utilizar a vari√°vel g:colors_name ou mesmo
    " execute('colorscheme') por√©m alguns temas armazenam nessas vari√°veis
    " nomes diferentes do nome do arquivo deles, e como :colorscheme depende
    " do nome do arquivo, o script falharia nessas circust√¢ncias, ent√£o
    " prefiri utilizar uma vari√°vel a parte para n√£o depender disso.
    let l:index = index(g:colorschemes, g:colorscheme.name, g:colorscheme.index)
    let l:newIndex = l:index + 1
    
    if l:newIndex >= len(g:colorschemes)
        let l:newIndex = 0
    endif
    let g:colorscheme.name = g:colorschemes[l:newIndex]

    execute('colorscheme ' .. g:colorscheme.name)
    let g:colorscheme.index = l:newIndex
    " redraw √© necess√°rio para evitar que a mensagem seja limpa antes
    "  de ser visualizada pelo usu√°rio ap√≥s o refresh autom√°tico da tela
    redraw | echom "Tema definido para" g:colorscheme.name g:colorscheme.index
endfunction

function! Changefontsize(o)
    let l:fontsize = matchstr(&guifont, '\d\+$')
    let l:fontname = matchstr(&guifont, '^[a-zA-Z ]\+')

    if (a:o == '+')
        let l:fontsize = str2nr(l:fontsize) + 1 
    else
        let l:fontsize = str2nr(l:fontsize) - 1
    endif

    let l:actualfont = l:fontname . l:fontsize

    echom "Setando a fonte: " . l:actualfont

    execute "set guifont=" . substitute(l:actualfont, '\([ ]\)', '\\\1', 'g')
endfunction

" Chamada quando executa :colorscheme <nome> afim de atualizar as minhas
" vari√°veis de tema
function! s:ForceUpdateColorscheme(name)
    let g:colorscheme.name = a:name 
    let g:colorscheme.index = index(g:colorschemes, a:name)
endfunction

function! s:apply_theme()
    let g:colorscheme = #{name: '', index: 0}
    if has('termguicolors')
        set termguicolors
    endif

    if has('gui_running')
        "set guioptions-=m  " remove o menu
        set guioptions-=T  " remove o toolbar
        set guioptions-=r  " remove o scroll da direita
        set guioptions-=L  " remove o scroll da esquerda
        "set guifont=Hack\ Nerd\ Font\ Mono\ Regular\ 9.5
        "set guifont=CaskaydiaCove\ Nerd\ Font\ Mono\ Semi-Light\ 9.5
        set guifont=Cousine\ Nerd\ Font\ Mono\ 9
    endif

    let s:hour_now = strftime("%H")
    let s:minute_now = strftime("%M")

    " ---- Dia: entre 7h as 17h15
    if s:hour_now >= 7 && s:hour_now < 17 || (s:hour_now == 17 && s:minute_now <= 15)
        " colorscheme modus-operandi
        let g:colorscheme.name = 'modus-operandi'
        let g:colorscheme.index = index(g:colorschemes, g:colorscheme.name)
        execute('colorscheme ' .. g:colorscheme.name)
    else
        let g:colorscheme.name = 'zaibatsu'
        let g:colorscheme.index = index(g:colorschemes, g:colorscheme.name)
        execute('colorscheme ' .. g:colorscheme.name)
    endif
    "highlight ModeMsg term=bold ctermfg=white ctermbg=darkred
    "highlight Normal guibg=NONE ctermbg=NONE
endfunc

" -------- sintaxe highlight --------
syntax enable

" -------- detec√ß√£o de configura√ß√µes por linguagem --------
filetype plugin indent on

" -----------------------------------------------
"                  mapeamentos
" -----------------------------------------------
map <C-s> :write!<CR>
imap <C-s> <ESC>:write!<CR>a
map <F3> :buffers<CR>
map <F5> :term<CR>
map <leader><C-p> :call PreviousColorScheme()<CR>
map <leader><C-n> :call NextColorScheme()<CR>
map <leader>b :bnext!<CR>
map <leader>B :bprevious!<CR>
map <leader>D :bdelete!<CR>
map <F8> :Lexplore 10<CR>
nmap <F9> :TagbarToggle<CR>
" no Windows o CTRL-] para navegar entre tags n√£o funciona!
if exists("$WINDIR")
    map <leader>j :tag <C-r><C-w><CR>
endif
map gF :e <cfile><CR>
map <silent> <C-w>q :call Prevent_quit()<CR>
map <leader>f :Explo<CR>
map <leader>h 5zh
map <leader>l 5zl
map <leader>k 5k
map <leader>j 5j
map <silent> <leader>[ :call Changefontsize('+')<CR>
map <silent> <leader>] :call Changefontsize('-')<CR>
" Quando fechar a janela de preview mate seu buffer
" -- Explica√ß√£o:
" -- Esse comportamento √© mais interessante do que deixar o buffer solto na
" -- lista de buffers, se a janela de preview √© para visualiza√ß√£o r√°pida ent√£o
" -- ela n√£o deveria sujar seu buffer
map <C-w>z :windo if &previewwindow \| bdelete \| endif \| pclose!<CR>
map <F2> a<C-R>=strftime("%c")<CR><ESC>

" ----------------------------------------------
"             ajustes de vari√°veis
" ----------------------------------------------
set shell=/usr/bin/bash\ --init-file\ ~/.bashrc_vim_term
set foldcolumn=1
set number
set nowrap
set encoding=utf8
set fileencoding=utf8
if strlen(&filetype) == 0
    set filetype=text
endif
set shiftwidth=4
set tabstop=4
set softtabstop=4
set showcmd
set laststatus=2
set expandtab
set smarttab
set smartindent
set hidden
set backspace=indent,eol,start
set autoindent
set wildmenu
set wildmode=full
"set colorcolumn=100
"set signcolumn=yes
"set cmdheight=2
"set updatetime=100
set nobackup
set nowritebackup
set splitright
set splitbelow
set mouse=a
"set autoread
"set scrolloff=8
set incsearch
set nohlsearch
 
set statusline=\ üìå\ (#%{%winnr()%})\ %-t\ %-m\ %=\ üî•\ %R%W%Y\ %l,%c\ %p%%\ [%{&fileencoding}\ %{&fileformat}]\ üí©\ 

" Configura√ß√£o de formas do cursor no terminal
" insert mode
let &t_SI.="\e[5 q"
" replace mode
let &t_SR.="\e[3 q"
" normal and others mode
let &t_EI.="\e[1 q"


" ------------------ Configura√ß√£o do Emmet --------------------
let g:user_emmet_leader_key='<leader>e'
let g:user_emmet_settings = {
\   'variables': {
\       'lang': "pt",
\       'locale': "pt-br",
\       'charset': "utf-8",
\   }
\}


" ------------------ Configura√ß√£o do netrw --------------------
let g:netrw_hide = 1
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_sizestyle = 'H'
let g:netrw_sort_by = 'name'
let g:netrw_sort_sequence = '\/$,\.html$,\.css$,\.js$,\.php\*\=$,\.pl\*\=$,\.pm$,\.md$,\.txt$,\.\(png\|jpeg\|jpg\|gif\|webp\)$,\.py$\*\=$,\.sh\*\=$,\.java$,\.pas$,\.c$,\.cpp$,\.h$,\.hpp$'

" Desabilitar o highlight de match de par√™nteses e similares
let g:loaded_matchparen=1

call FindAllColorschemes()

" Deve ser chamada ap√≥s FindAllColorschemes()
call s:apply_theme()

" Deve ser definido ap√≥s s:apply_theme() por causa da n√£o-exist√™ncia de g:colorscheme
autocmd! ColorScheme * let m = expand("<amatch>") |
            \ execute('call s:ForceUpdateColorscheme(m)') 
